{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"type define": {
		"scope": "typescript",
		"prefix": "td",
		"body": [
			"type ${1:Point} = {",
			"\t${2:x}: ${3:number};",
			"\t${4:y: number;}",
			"};"
		],
		"description": "type define"
	},
	"type define union": {
		"scope": "typescript",
		"prefix": "td2",
		"body": [
			"type ${1:ID} = ${2:number | string};"
		],
		"description": "type define union"
	},
	"enum init": {
		"scope": "typescript",
		"prefix": "eni",
		"body": [
			"enum ${1:enumName} {",
			"\t${2:FIRST}${3: = 1},",
			"}",
		],
		"description": "enum init"
	},
	"type check": {
		"scope": "typescript",
		"prefix": "tch",
		"body": [
			"typeof ${1:padding} === ${2:\"number\"}"
		],
		"description": "type check"
	},
	"print": {
		"scope": "typescript",
		"prefix": "p",
		"body": [
			"console.log(${TM_SELECTED_TEXT:${1:value}});",
		],
		"description": "print"
	},
	"return": {
		"scope": "typescript",
		"prefix": "rt",
		"body": [
			"return ${TM_SELECTED_TEXT:${1:}}",
		],
		"description": "return"
	},
	"type alias": {
		"scope": "typescript",
		"prefix": "typedef",
		"body": [
			"type ${1:TypeName} = ${2:OriginalType};",
		],
		"description": "type alias"
	},
	"import package": {
		"scope": "typescript",
		"prefix": "im",
		"body": [
			"import * as ${1:fs} from '${1:fs}';",
		],
		"description": "import package"
	},

	"import from package": {
		"scope": "typescript",
		"prefix": "imf",
		"body": [
			"import {${2:}} from '${1:fs}';",
		],
		"description": "import from package"
	}
}