{
  "list init": {
    "scope": "javascript, javascriptreact",
    "prefix": "li",
    "body": [
      "${1|const,let|} ${2:mylist} = [];"
    ],
    "description": "list declare"
  },
  "list unic init (set)": {
    "scope": "javascript, javascriptreact",
    "prefix": "lui",
    "body": [
      "let ${1:name} = new Set([${2:1,2,3}]);",
    ]
  },
  "list to string": {
    "scope": "javascript, javascriptreact, typescript",
    "prefix": "lts",
    "body": [
      "${1:${TM_SELECTED_TEXT:mlist}}.join(${2:'delimeter'})"
    ],
    "description": "list to string"
  },
  "list get item": {
		"scope": "javascript, javascriptreact",
		"prefix": "lgi",
		"body": [
		  "${1:mlist}[${2:index}]"
		 ],
		"description": "list get item"
	},

  "list slice": {
    "scope": "javascript, javascriptreact",
    "prefix": "lsl",
    "body": [
      "${1:mylist}.slice(${2:1},${3:-1})",
    ],
    "description": "list slice"
  },
  "last item of list": {
    "scope": "javascript, javascriptreact",
    "prefix": "le",
    "body": [
      "${1:mylist}[${1:mylist}.length - 1]"
    ],
    "description": "last item of list"
  },
  "map list": {
    "scope": "javascript, javascriptreact",
    "prefix": "lm",
    "body": [
      "let ${1:newList} = ${2:oldList}.map(function(${3:item}){",
      "  return ${3:item}*2;",
      "});"
    ],
    "description": "map list"
  },

  "list map foreach": {
    "scope": "javascript, javascriptreact",
    "prefix": "lmf",
    "body": [
        "${1:names}.forEach((${2:item})=>{",
            "\tconsole.log(${3:${2:item}+'1'});",
        "});",
        
    ],
    "description": "list map foreach"
},
  "list append": {
    "scope": "javascript, javascriptreact",
    "prefix": "la",
    "body": [
      "${1:mylist}.push(${2:item1,item2})",
      ""
    ],
    "description": "return length of list"
  },
  "list sort": {
    "scope": "javascript, javascriptreact",
    "prefix": "lsrt",
    "body": [
      "${1:mylist}.sort(${2|(a\\,b)=>a-b, |})"
    ],
    "description": "list sort"
  },
  "list max": {
    "scope": "javascript, javascriptreact",
    "prefix": "lmax",
    "body": [
      "Math.max(...${1:mylist})"
    ],
    "description": "list max"
  },
  "list min": {
    "scope": "javascript, javascriptreact",
    "prefix": "lmin",
    "body": [
      "Math.min(...${1:mylist})"
    ],
    "description": "list min"
  },
  "list extend": {
    "scope": "javascript, javascriptreact",
    "prefix": "lext",
    "body": [
      "Array.prototype.push.apply(${1:mylist}, ${2:mylist2});"
    ],
    "description": "list extend"
  },
  "list index": {
    "scope": "javascript, javascriptreact",
    "prefix": "lidx",
    "body": [
      "${1:mlist}.indexOf(${2:item})"
    ],
    "description": "list index"
  },
  "list insert": {
    "scope": "javascript, javascriptreact",
    "prefix": "lins",
    "body": [
      "${1:listName}.insert(${2:idx}, ${3:item})"
    ],
    "description": "list insert"
  },
  "list reverse": {
    "scope": "javascript, javascriptreact",
    "prefix": "lrev",
    "body": [
      "${1:listName}.reverse()"
    ],
    "description": "list reverse"
  },
  "list iterate": {
    "scope": "javascript, javascriptreact",
		"prefix": "lit",
		"body": [
			"${1:listName}.forEach((${2|val,val\\, i|}) => {${3}});"
		],
		"description": "list iterate"
	},
  "list remove": {
    "scope": "javascript, javascriptreact",
		"prefix": "lrm",
		"body": [
			"${2:listName} = ${2:listName}.${1|pop(),shift(),filter((val\\,idx) => idx != 2)|}"
		],
		"description": ["pop() - remove last element", 
                    "shift() - remove first element\n", 
                    "filter() - remove by func"]
	},
}